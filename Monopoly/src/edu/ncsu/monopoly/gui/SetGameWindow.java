/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ncsu.monopoly.gui;

import edu.ncsu.monopoly.GameBoard;
import edu.ncsu.monopoly.GameMaster;
import edu.ncsu.monopoly.Player;
import edu.ncsu.monopoly.Sistema;
import edu.ncsu.monopoly.test.boardScenarios.GameBoardFull;
import java.awt.HeadlessException;
import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;

/**
 *
 * @author mateoblanco
 */
public class SetGameWindow extends javax.swing.JFrame implements Observer{
        private Sistema sistema;

    /**
     * Creates new form NewJFrame
     */
    public SetGameWindow(Sistema unSistema) {
        initComponents();
        sistema=unSistema;
        listaJugadores.setSelectionMode(DefaultListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        sistema.addObserver(this);
        
        //Se actualiza ventana principal
        actualizarVentana();
    }
    
    @Override
public void update(Observable o, Object o1) {
        actualizarVentana();
    }

    public void actualizarVentana() {
        
        if(sistema.devolverJugadores().size()>0){
            ArrayList<String> listaJ=new ArrayList<String>();
            Iterator<Player> it= sistema.devolverJugadores().iterator();
            while(it.hasNext()){
                Player p=it.next();
                listaJ.add(p.getName());
            }
            
        listaJugadores.setListData((String[]) listaJ.toArray());
        listaJugadores.setEnabled(true);
        }else{
            listaJugadores.setEnabled(false);
            
            
        }
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BtnComenzarPartida = new javax.swing.JButton();
        BtnCrearJugador = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaJugadores = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BtnComenzarPartida.setText("Comenzar");
        BtnComenzarPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnComenzarPartidaActionPerformed(evt);
            }
        });

        BtnCrearJugador.setText("Crear Jugador");
        BtnCrearJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCrearJugadorActionPerformed(evt);
            }
        });

        listaJugadores.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listaJugadores);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(BtnCrearJugador))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 197, Short.MAX_VALUE)
                .addComponent(BtnComenzarPartida)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(BtnCrearJugador)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(174, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addComponent(BtnComenzarPartida)
                .addGap(125, 125, 125))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void BtnComenzarPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnComenzarPartidaActionPerformed
        GameMaster master = GameMaster.instance();
        MainWindow window = new MainWindow();
        GameBoard gameBoard = null;
	gameBoard = new GameBoardFull();
        
        try {
        int[] seleccionLista = (int[]) listaJugadores.getSelectedIndices();
        
               
        if(seleccionLista.length<2){
            JOptionPane.showMessageDialog(this, "Se deben seleccionar mas de 2 jugadores " , "Error", JOptionPane.ERROR_MESSAGE);
     
        }
        else if(seleccionLista.length > master.MAX_PLAYER){
            JOptionPane.showMessageDialog(this, "No se pueden seleccionar mas de 8 jugadores " , "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
                master.setGameBoard(gameBoard);
		int numPlayers = seleccionLista.length;
		for(int i = 0; i < numPlayers; i++) {
			
			GameMaster.instance().getPlayer(i);
		}
                
		window.setupGameBoard(gameBoard);
		window.show();
		master.setGUI(window);
		master.startGame();
                
            Jugador j1=sistema.devolverJugador(seleccionLista[0]);
            Jugador j2=sistema.devolverJugador(seleccionLista[1]);
            Partida p=new Partida(cuadradoInicial,distribucion,terminacion,j1,j2,movPrestablecidos,tiempoPredefinido,"");
            sistema.agregarUnaPartida(p);
            int indice= sistema.devolverPartidas().size()-1;
            VentanaJugar ventanaJuego = new VentanaJugar(this.getSistema(),indice);
            ventanaJuego.setVisible(true);
            this.dispose();
        }
        }catch (NumberFormatException err){
             // El error se produce por el ingreso incorecto del monto
            JOptionPane.showMessageDialog(this, "ERROR, INGRESE LOS MOVIMIENTOS CORRECTAMENTE" , "Error", JOptionPane.ERROR_MESSAGE);
            
            
        } catch(Exception err) {
            
            // Ocurre otro error no identificado
            JOptionPane.showMessageDialog(this, "ERROR, INGRESE LOS DATOS CORRECTAMENTE" , "Error", JOptionPane.ERROR_MESSAGE);
            
        }
        
        
        
        
        
        
        
        
        
        

		
		
//      GameBoard gameBoard = new GameBoardFull();
//		GameBoard gameBoard = new GameBoardCCMovePlayer();
//		GameBoard gameBoard = new GameBoardCCLoseMoney();
//		GameBoard gameBoard = new GameBoardCCJail();
//		GameBoard gameBoard = new GameBoardUtility();
//		GameBoard gameBoard = new GameBoardRailRoad();
//		GameBoard gameBoard = new GameBoard14();
//		GameBoard gameBoard = new SimpleGameBoard();
//		GameBoard gameBoard = new GameBoardJail();
//		GameBoard gameBoard = new GameBoardFreeParking();
                
		        // TODO add your handling code here:
    }//GEN-LAST:event_BtnComenzarPartidaActionPerformed

    private void BtnCrearJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCrearJugadorActionPerformed

CreatePlayerWindow ventana = new CreatePlayerWindow(sistema);
            ventana.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnCrearJugadorActionPerformed
private static int inputNumberOfPlayers(MainWindow window) {
		int numPlayers = 0;
		while(numPlayers <= 0 || numPlayers > GameMaster.MAX_PLAYER) {
			String numberOfPlayers = JOptionPane.showInputDialog(window, "How many players");
			if(numberOfPlayers == null) {
				System.exit(0);
			}
			try {
				numPlayers = Integer.parseInt(numberOfPlayers);
			} catch (NumberFormatException e) {
				JOptionPane.showMessageDialog(window, "Please input a number");
			}
			if (numPlayers <= 0 || numPlayers > GameMaster.MAX_PLAYER) {
				JOptionPane.showMessageDialog(window, "Please input a number between one and eight");
			} else {
				GameMaster.instance().setNumberOfPlayers(numPlayers);
			}
		}
		return numPlayers;
	}
private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
        try {
            FileOutputStream fos = new FileOutputStream("jugadores.txt");
            BufferedOutputStream b = new BufferedOutputStream(fos);
            try (ObjectOutputStream oos = new ObjectOutputStream(b)) {
                oos.writeObject(sistema);
                oos.flush();
            }
        }
        catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "El archivo no existe ", "Error", JOptionPane.ERROR_MESSAGE);        // TODO Auto-generated catch block} 
        } 
        catch (IOException e) {
            JOptionPane.showMessageDialog(this, "ERROR ", "Error", JOptionPane.ERROR_MESSAGE);
        }

        System.exit(0);
        // TODO add your handling code here:
    } 
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnComenzarPartida;
    private javax.swing.JButton BtnCrearJugador;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaJugadores;
    // End of variables declaration//GEN-END:variables
}
